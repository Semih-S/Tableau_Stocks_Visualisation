<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1112.0850                               -->
<workbook original-version='18.1' source-build='2024.3.1 (20243.24.1112.0850)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='stock_details_5_years' inline='true' name='federated.1ariypt175q3fw1by1jru0z4jrwh' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='stock_details_5_years' name='textscan.1dams2t0r5uow21ep9kwm07295ew'>
            <connection class='textscan' directory='C:/Users/ssemi/OneDrive/Masaüstü/Semih/CSV ML, DS, DA/Tableau' filename='stock_details_5_years.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1dams2t0r5uow21ep9kwm07295ew' name='stock_details_5_years.csv' table='[stock_details_5_years#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='Date' ordinal='0' />
            <column datatype='real' name='Open' ordinal='1' />
            <column datatype='real' name='High' ordinal='2' />
            <column datatype='real' name='Low' ordinal='3' />
            <column datatype='real' name='Close' ordinal='4' />
            <column datatype='integer' name='Volume' ordinal='5' />
            <column datatype='real' name='Dividends' ordinal='6' />
            <column datatype='integer' name='Stock Splits' ordinal='7' />
            <column datatype='string' name='Company' ordinal='8' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;£&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Open</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Open]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Open</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>High</remote-name>
            <remote-type>5</remote-type>
            <local-name>[High]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>High</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Low</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Low]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Low</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Close</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Close]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Close</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Volume</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Volume]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Volume</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dividends</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Dividends]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Dividends</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Stock Splits</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Stock Splits]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Stock Splits</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Company</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Company]</local-name>
            <parent-name>[stock_details_5_years.csv]</parent-name>
            <remote-alias>Company</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[Close]' role='measure' type='quantitative' />
      <column datatype='string' name='[Company]' role='dimension' type='nominal' />
      <column datatype='real' name='[Dividends]' role='measure' type='quantitative' />
      <column datatype='real' name='[High]' role='measure' type='quantitative' />
      <column datatype='real' name='[Low]' role='measure' type='quantitative' />
      <column datatype='real' name='[Open]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Stock Splits]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Volume]' role='measure' type='quantitative' />
      <column caption='stock_details_5_years.csv' datatype='table' name='[__tableau_internal_object_id__].[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Company]' derivation='None' name='[none:Company:nk]' pivot='key' type='nominal' />
      <column-instance column='[Close]' derivation='Sum' name='[sum:Close:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Dividends]' derivation='Sum' name='[sum:Dividends:qk]' pivot='key' type='quantitative' />
      <column-instance column='[High]' derivation='Sum' name='[sum:High:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Low]' derivation='Sum' name='[sum:Low:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Open]' derivation='Sum' name='[sum:Open:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Stock Splits]' derivation='Sum' name='[sum:Stock Splits:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Volume]' derivation='Sum' name='[sum:Volume:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Company:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;ADBE&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;AMZN&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;BAC&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;BP&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;CEG&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;CPNG&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;DD&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;EBAY&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;EW&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;GD&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;HDB&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;IDXX&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;KEYS&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;LYB&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;MMM&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;NET&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;OKE&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;PKX&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;REGN&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;SHEL&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;STM&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;TMO&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;UL&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;WBD&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;ZM&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;A&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;ALL&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AVB&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;BKNG&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;CB&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;CNI&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;CTVA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;DOV&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;EPD&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;FICO&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;GPN&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;HUBS&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;ITUB&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;LIN&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;MDT&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;MT&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;NVDA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;PDX&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;PXD&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;SAN&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;SPG&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;TEAM&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;TTD&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;VLO&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;WST&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ABNB&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;AME&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;AZN&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;BMY&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;CCJ&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;COP&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;D&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;DVN&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ES&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;FNV&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;GWW&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;IBM&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;JD&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;LOW&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MFC&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MUFG&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;NWG&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;PG&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;RACE&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SCCO&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SQ&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;TGT&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;TW&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;VRSN&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;XOM&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;ADSK&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;APD&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;BCS&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;BSX&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;CI&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;CRM&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;DEO&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;EFX&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;FANG&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;GIB&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;HLN&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;ING&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;KMB&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;MAR&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;MPWR&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;NOC&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;OTIS&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;PNC&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;RMD&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;SLF&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;SYK&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;TROW&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;UNP&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;WEC&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ADI&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ANET&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;BBD&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;BR&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;CHD&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;CPRT&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;DDOG&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;EC&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;EXC&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;GE&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;HEI&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;IFF&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;KHC&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;LYG&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;MO&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;NFLX&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ON&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;PLD&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;RELX&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;SHOP&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;STT&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;TMUS&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ULTA&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;WCN&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;ZS&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;ABT&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;AMGN&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;AZO&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;BN&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;CCL&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;COR&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;DAL&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;DXCM&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;ET&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;FTNT&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;HAL&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;IBN&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;JNJ&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;LRCX&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;MFG&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;NDAQ&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;NXPI&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;PGR&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;RBLX&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;SCHW&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;SRE&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;TJX&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;TXN&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;VRTX&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;XYL&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;AJG&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;ARM&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;BIIB&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;CARR&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;CMI&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;CTRA&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DLR&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;ENB&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;FERG&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;GOLD&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;HSBC&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;ISRG&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;LHX&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;MDB&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;MSFT&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;NU&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;PCG&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;PUK&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;RY&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;SO&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;TD&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;TSM&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;VEEV&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;WMT&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AAPL&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;ALNY&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AVGO&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;BKR&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;CBRE&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;CNQ&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;CVE&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;DOW&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;EQIX&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;FIS&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;GRMN&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;HUM&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;ITW&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;LLY&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MELI&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MTB&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;NVO&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;PEG&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;PYPL&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;SAP&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;SPGI&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;TEF&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;TTE&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;VMC&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;WTW&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;AFL&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;ARES&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;BHP&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;C&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;CME&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;CSX&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;DHR&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;ELV&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;FDX&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;GM&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;HPE&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;IQV&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;KVUE&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MCK&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MS&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;NTES&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;PBR&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;PSA&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;RSG&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;SNPS&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;TAK&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;TSCO&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;V&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;WM&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;ACGL&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;AMP&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;BA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;BNS&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;CDNS&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;COST&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;DASH&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;E&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;ETN&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;FTS&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;HCA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;ICE&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;JPM&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;LULU&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;MLM&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;NEE&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;PH&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;RCI&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;SE&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;STE&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;TLK&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;UBER&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;VZ&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;YUM&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;AEE&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;APH&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;BDX&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;BTI&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;CL&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;CRWD&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;DFS&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;EIX&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;FAST&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;GILD&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;HLT&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;INTC&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;KMI&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;MBLY&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;MRK&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;NOK&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;OXY&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;PPG&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;ROK&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;SMFG&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;SYM&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;TRP&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;UPS&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;WELL&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;AEM&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;APO&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;BEKE&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;BUD&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;CM&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;CSCO&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;DG&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;EL&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;FCNCA&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;GIS&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;HMC&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;INTU&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;KO&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;MCD&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;MRNA&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;NOW&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;PANW&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;PPL&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;ROL&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;SNAP&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;SYY&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;TRV&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;URI&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;WFC&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;AIG&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;ARGX&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;BIDU&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;CAH&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;CMG&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;CTAS&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;DIS&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;EMR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;FE&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;GMAB&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;HPQ&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;IR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;LEN&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;MCO&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;MSCI&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;NTR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;PCAR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;PSX&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;RTX&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;SNY&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;TCOM&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;TSLA&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;VALE&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;WMB&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;ALC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;ASML&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;BK&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;CAT&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;CNC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;CTSH&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DLTR&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;EOG&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;FI&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;GOOGL&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;HSY&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;IT&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;LI&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;MDLZ&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;MSI&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;NUE&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;PDD&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;PWR&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;RYAAY&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;SONY&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;TDG&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;TT&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;VICI&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;WPM&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;ADM&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;ANSS&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;BBVA&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;BRO&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;CHT&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;CQP&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;DE&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;ECL&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;EXR&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;GEHC&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;HES&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;IMO&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;KKR&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;LYV&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;MOH&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;NGG&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;ORAN&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;PLTR&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;RIO&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;SHW&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;STZ&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;TRGP&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;UMC&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;WDAY&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;ZTS&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;ACN&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;AMT&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;BABA&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;BNTX&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;CDW&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;CP&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;DB&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;EA&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;ETR&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;FTV&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;HD&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;ICLR&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;KDP&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;LVS&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;MMC&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;NEM&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;ODFL&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;PINS&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;RCL&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;SGEN&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;STLA&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;TM&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;UBS&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;WAB&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;ZBH&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;ABBV&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;AMAT&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;AWK&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;BLK&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CCEP&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;COF&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CVS&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;DTE&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;EQNR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;FITB&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;GS&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;HWM&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;IX&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;LMT&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;MET&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;MTD&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;NVR&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;PEP&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;QCOM&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;SBAC&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;SPLK&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;TEL&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;TTWO&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;VOD&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;WY&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;AEP&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;APTV&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;BGNE&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;BX&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CMCSA&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CSGP&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;DHI&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;ELP&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;FCX&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;GLW&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;HON&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;INVH&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;KR&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;MCHP&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;MRVL&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;NSC&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;PAYX&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;PRU&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;ROST&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;SNOW&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;T&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;TS&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;USB&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;WIT&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;ADP&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;AON&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;BCE&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;BSBR&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;CHTR&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;CRH&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;DELL&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;ED&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;F&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;GFS&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;HIG&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;INFY&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;KLAC&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;MA&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;MPLX&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;NKE&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;ORCL&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;PM&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;RJF&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;SLB&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;SU&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;TRI&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;UNH&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;WDS&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;ABEV&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;AMD&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;AXP&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;BMO&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CCI&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;COIN&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CVX&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;DUK&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;EQR&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;FMX&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;GSK&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;IBKR&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;JCI&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;LNG&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;META&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;MU&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;NVS&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;PFE&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;QSR&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;SBUX&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;SPOT&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;TFC&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;TU&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;VRSK&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;XEL&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[__tableau_internal_object_id__].[cnt:stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Close:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Stock Splits:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Open:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Dividends:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Low:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Volume:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <object-graph>
        <objects>
          <object caption='stock_details_5_years.csv' id='stock_details_5_years.csv_18B87F94B1CA4E47904DB9FC57699664'>
            <properties context=''>
              <relation connection='textscan.1dams2t0r5uow21ep9kwm07295ew' name='stock_details_5_years.csv' table='[stock_details_5_years#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
                  <column datatype='string' name='Date' ordinal='0' />
                  <column datatype='real' name='Open' ordinal='1' />
                  <column datatype='real' name='High' ordinal='2' />
                  <column datatype='real' name='Low' ordinal='3' />
                  <column datatype='real' name='Close' ordinal='4' />
                  <column datatype='integer' name='Volume' ordinal='5' />
                  <column datatype='real' name='Dividends' ordinal='6' />
                  <column datatype='integer' name='Stock Splits' ordinal='7' />
                  <column datatype='string' name='Company' ordinal='8' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Opening, Lowest and Highest Stocks</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='stock_details_5_years' name='federated.1ariypt175q3fw1by1jru0z4jrwh' />
          </datasources>
          <datasource-dependencies datasource='federated.1ariypt175q3fw1by1jru0z4jrwh'>
            <column datatype='string' name='[Company]' role='dimension' type='nominal' />
            <column datatype='real' name='[High]' role='measure' type='quantitative' />
            <column datatype='real' name='[Low]' role='measure' type='quantitative' />
            <column datatype='real' name='[Open]' role='measure' type='quantitative' />
            <column-instance column='[Company]' derivation='None' name='[none:Company:nk]' pivot='key' type='nominal' />
            <column-instance column='[High]' derivation='Sum' name='[sum:High:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Low]' derivation='Sum' name='[sum:Low:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Open]' derivation='Sum' name='[sum:Open:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Low:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Open:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ariypt175q3fw1by1jru0z4jrwh].[Multiple Values]</rows>
        <cols>([federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk] / [federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{573A54CD-676B-469C-A249-0B7220E0487C}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Volume of Stocks</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='stock_details_5_years' name='federated.1ariypt175q3fw1by1jru0z4jrwh' />
          </datasources>
          <datasource-dependencies datasource='federated.1ariypt175q3fw1by1jru0z4jrwh'>
            <column datatype='string' name='[Company]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Volume]' role='measure' type='quantitative' />
            <column-instance column='[Company]' derivation='None' name='[none:Company:nk]' pivot='key' type='nominal' />
            <column-instance column='[Volume]' derivation='Sum' name='[sum:Volume:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]</rows>
        <cols>[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Volume:qk]</cols>
      </table>
      <simple-id uuid='{099066C9-60D9-48EE-AC47-B2672317BCBF}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Volume of Stocks by Date</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='stock_details_5_years' name='federated.1ariypt175q3fw1by1jru0z4jrwh' />
          </datasources>
          <datasource-dependencies datasource='federated.1ariypt175q3fw1by1jru0z4jrwh'>
            <column datatype='string' name='[Date]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Volume]' role='measure' type='quantitative' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:nk]' pivot='key' type='nominal' />
            <column-instance column='[Volume]' derivation='Sum' name='[sum:Volume:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Date:nk]</rows>
        <cols>[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Volume:qk]</cols>
      </table>
      <simple-id uuid='{8E05189C-6A94-4A42-8B7B-7762CABAB066}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Highest Stocks by Company</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='stock_details_5_years' name='federated.1ariypt175q3fw1by1jru0z4jrwh' />
          </datasources>
          <datasource-dependencies datasource='federated.1ariypt175q3fw1by1jru0z4jrwh'>
            <column datatype='string' name='[Company]' role='dimension' type='nominal' />
            <column datatype='real' name='[High]' role='measure' type='quantitative' />
            <column-instance column='[Company]' derivation='None' name='[none:Company:nk]' pivot='key' type='nominal' />
            <column-instance column='[High]' derivation='Sum' name='[sum:High:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]' />
              <color column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]' />
              <text column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{E90A2947-AA08-4098-9592-5E77217A4E10}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Individual Stocks&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='stock_details_5_years' name='federated.1ariypt175q3fw1by1jru0z4jrwh' />
          </datasources>
          <datasource-dependencies datasource='federated.1ariypt175q3fw1by1jru0z4jrwh'>
            <column datatype='string' name='[Company]' role='dimension' type='nominal' />
            <column datatype='real' name='[High]' role='measure' type='quantitative' />
            <column datatype='real' name='[Low]' role='measure' type='quantitative' />
            <column-instance column='[Company]' derivation='None' name='[none:Company:nk]' pivot='key' type='nominal' />
            <column-instance column='[High]' derivation='Sum' name='[sum:High:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Low]' derivation='Sum' name='[sum:Low:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:Low:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]'>
            <groupfilter expression='CONTAINS(LOWER([Company]), LOWER(&apos;NVR&apos;))' function='filter' user:ui-enumeration='inclusive' user:ui-pattern-include-all-when-empty='true' user:ui-pattern_text='NVR' user:ui-pattern_type='contains'>
              <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;A&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AAPL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ABBV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ABEV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ABNB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ABT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ACGL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ACN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ADBE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ADI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ADM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ADP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ADSK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AEE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AEM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AEP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AFL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AIG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AJG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ALC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ALL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ALNY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AMAT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AMD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AME&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AMGN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AMP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AMT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AMZN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ANET&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ANSS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AON&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;APD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;APH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;APO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;APTV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ARES&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ARGX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ARM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ASML&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AVB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AVGO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AWK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AXP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AZN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;AZO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BABA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BAC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BBD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BBVA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BCE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BCS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BDX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BEKE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BGNE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BHP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BIDU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BIIB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BKNG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BKR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BLK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BMO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BMY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BNS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BNTX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BRO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BSBR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BSX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BTI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BUD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;BX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;C&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CAH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CARR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CAT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CBRE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CCEP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CCI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CCJ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CCL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CDNS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CDW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CEG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CHD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CHT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CHTR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CMCSA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CME&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CMG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CMI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CNC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CNI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CNQ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;COF&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;COIN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;COP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;COR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;COST&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CPNG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CPRT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CQP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CRH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CRM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CRWD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CSCO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CSGP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CSX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CTAS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CTRA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CTSH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CTVA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CVE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CVS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;CVX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;D&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DAL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DASH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DDOG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DELL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DEO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DFS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DHI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DHR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DIS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DLR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DLTR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DOV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DOW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DTE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DUK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DVN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;DXCM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;E&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EBAY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ECL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ED&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EFX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EIX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ELP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ELV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EMR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ENB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EOG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EPD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EQIX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EQNR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EQR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ES&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ET&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ETN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ETR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EXC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;EXR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;F&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FANG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FAST&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FCNCA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FCX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FDX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FERG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FICO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FIS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FITB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FMX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FNV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FTNT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FTS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;FTV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GEHC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GFS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GIB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GILD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GIS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GLW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GMAB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GOLD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GOOGL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GPN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GRMN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GSK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;GWW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HAL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HCA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HDB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HEI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HES&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HIG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HLN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HLT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HMC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HON&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HPE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HPQ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HSBC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HSY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HUBS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HUM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;HWM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IBKR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IBM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IBN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ICE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ICLR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IDXX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IFF&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IMO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;INFY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ING&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;INTC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;INTU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;INVH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IQV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ISRG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ITUB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ITW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;IX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;JCI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;JD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;JNJ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;JPM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KDP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KEYS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KHC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KKR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KLAC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KMB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KMI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;KVUE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LEN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LHX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LIN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LLY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LMT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LNG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LOW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LRCX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LULU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LVS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LYB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LYG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;LYV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MAR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MBLY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MCD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MCHP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MCK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MCO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MDB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MDLZ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MDT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MELI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MET&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;META&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MFC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MFG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MLM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MMC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MMM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MOH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MPLX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MPWR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MRK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MRNA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MRVL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MSCI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MSFT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MSI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MTB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MTD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;MUFG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NDAQ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NEE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NEM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NET&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NFLX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NGG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NKE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NOC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NOK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NOW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NSC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NTES&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NTR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NUE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NVDA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NVO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NVR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NVS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NWG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;NXPI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;O&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ODFL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;OKE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ON&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ORAN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ORCL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;OTIS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;OXY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PANW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PAYX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PBR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PCAR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PCG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PDD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PDX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PEG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PEP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PFE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PGR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PINS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PKX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PLD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PLTR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PNC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PPG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PPL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PRU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PSA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PSX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PUK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PWR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PXD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;PYPL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;QCOM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;QSR&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RACE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RBLX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RCI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RCL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;REGN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RELX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RIO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RJF&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RMD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ROK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ROL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ROST&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RSG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RTX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;RYAAY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SAN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SAP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SBAC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SBUX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SCCO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SCHW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SGEN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SHEL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SHOP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SHW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SLB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SLF&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SMFG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SNAP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SNOW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SNPS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SNY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SONY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SPG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SPGI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SPLK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SPOT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SQ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SRE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;STE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;STLA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;STM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;STT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;STZ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SYK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SYM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;SYY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;T&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TAK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TCOM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TDG&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TEAM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TEF&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TEL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TFC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TGT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TJX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TLK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TMO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TMUS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TRGP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TRI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TROW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TRP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TRV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TSCO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TSLA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TSM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TTD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TTE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TTWO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TU&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;TXN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UBER&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UBS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ULTA&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UMC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UNH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UNP&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;UPS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;URI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;USB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;V&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VALE&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VEEV&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VICI&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VLO&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VMC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VOD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VRSK&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VRSN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VRTX&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;VZ&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WAB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WBD&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WCN&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WDAY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WDS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WEC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WELL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WFC&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WIT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WMB&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WMT&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WPM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WST&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WTW&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;WY&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;XEL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;XOM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;XYL&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;YUM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ZBH&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ZM&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ZS&quot;' />
                <groupfilter function='member' level='[none:Company:nk]' member='&quot;ZTS&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]</column>
            <column>[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ariypt175q3fw1by1jru0z4jrwh].[Multiple Values]</rows>
        <cols>([federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk] / [federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{8F5042DE-C260-4324-9B31-549DDF734512}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='stock_details_5_years' name='federated.1ariypt175q3fw1by1jru0z4jrwh' />
      </datasources>
      <datasource-dependencies datasource='federated.1ariypt175q3fw1by1jru0z4jrwh'>
        <column datatype='string' name='[Company]' role='dimension' type='nominal' />
        <column-instance column='[Company]' derivation='None' name='[none:Company:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='5' type-v2='layout-basic' w='47500' x='800' y='1000'>
              <zone h='49000' id='3' name='Sheet 4' w='47500' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='Sheet 5' w='47500' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='509' h='98000' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='50900' x='48300' y='1000'>
              <zone fixed-size='361' h='33000' id='8' is-fixed='true' name='Sheet 4' pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]' type-v2='color' w='50900' x='48300' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone fixed-size='248' h='32000' id='10' is-fixed='true' mode='pattern' name='Sheet 5' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]' type-v2='filter' w='50900' x='48300' y='34000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone fixed-size='261' h='33000' id='11' is-fixed='true' name='Sheet 5' pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' type-v2='color' w='50900' x='48300' y='66000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='800' minheight='800' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='13' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='12' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='49000' id='3' is-fixed='true' name='Sheet 4' w='47500' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='361' h='33000' id='8' name='Sheet 4' pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]' type-v2='color' w='50900' x='48300' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='248' h='32000' id='10' mode='pattern' name='Sheet 5' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]' type-v2='filter' w='50900' x='48300' y='34000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49000' id='9' is-fixed='true' name='Sheet 5' w='47500' x='800' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='261' h='33000' id='11' name='Sheet 5' pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' type-v2='color' w='50900' x='48300' y='66000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{463FFCC7-DECD-4F6F-98EE-C26671E54B10}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' show-morefewerbutton='false' type='filter' />
            <card pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]</field>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F2B0400F-44B8-4982-8948-607B20A61B8A}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]</field>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Date:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4C950AFB-29D5-4263-B591-252169C9E533}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Date:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AE56CC36-9D0B-4DB5-9594-67C13C58D4D5}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[sum:High:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D302EF75-A871-4395-9E2B-37B0C70B72FB}' />
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='pattern' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]</field>
            <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[none:Company:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{04050ACB-D388-4250-A0D1-115ED12FB480}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 4' />
        <viewpoint name='Sheet 5'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1ariypt175q3fw1by1jru0z4jrwh].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{241D88F2-1B9F-4A94-9D99-970AF0E6A683}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nO2daXRc5Znnf3Wrbu0qqUq7LMmWvK8YC4PBgAkxxEmAJJ0A7gY6SdMNfbrn
      TM/0mTkzH+ZTn5kPM93n5Mx0OgkY0iFgsifEgFmskGBsg40ly5I3rda+SyWpNtU+H0pL7VWS
      S7Kken/n6Nz3bu99Vff+7/s8z7tcRTAYDCIQZCnS7S6AQHA7EQIQZDVCAIKsRghAkNUIAWQJ
      g0NDAAwNDVJfXx+x7/q1a7ejSCsCIYAs4VRtLQC1tadQqZR4HBMcf+0nfNZwjfoLZzj+09cY
      tblvcymXnwgB2Ee6aekemVuvr68D4OzZc3FP7mr6lOYB+4Iu2Nh4OWZbS+MFjh07xsna03gD
      0N9xjRG7L6380i3Dh7Wn0ixhkItnajl27FUabtxM85yVT3dzAy+//DJWJzQ1NXL6w/d54Ikn
      6Wm7iqTS8vDdW7jc0n+7i7nsRAmgh9aeeQFcuhQSwKaNG0MbggFar1+hrbMHu92BY2qcSbuD
      pssNTNinAfB5XFxuaMDu8gDgsk9QX1/P+JQD60g/7508SV1dHSNWW2j/SBsfXR7g+eefZ1u5
      CafTxZ/+8D6ffPo5zR3dAIwP93P5yg0CMy0Wfo+LhkuXGJ9y4pgaxz7tA4J09/TMlbG5vZvw
      Bo6hoSHam6/SNzwOQG9f39y+/v6BufSf3vkl41Ihz//Vtyk0aeNef2hokK72ZnoHR7FPjtE4
      s88xOcbo2BiXGhrx+AIAOKbGqa+vZ3QiJNLBoSHsE6M0NF7FFwgy2NeHbybf4f6BuXSmqdy6
      lxdeeAGzPrReWpLPb958kzG7B41Wj06jXpoLr3BiTKCbrTeoq6ujrq4Olze0rfZUqPp888c/
      oH1gnPaLp/j4chcAp959G8f0ND/96XEIenn1pWO43G5effkYngD8+6vH8Pn91NVdilsAtcGC
      tecqH5+ro3zzHnK1kfv7mj/n5+98jH2sjx/9+5vgn+b7//pvuDxebjQ3zx139oO3GLYHOf32
      r2kesNLfcYX+cdd8Pu3X6B2d4r1f/JgrXWN8/N4JJt0BvPZB/nBmvmw3R108et8dSEoV68pK
      Y68PHPv+v9DaM8IbL/0rJz86x0j7RU6eu0rXlc/46W9P4XZY+X8/fBWAi+fP4/f7efPfX8Xh
      h5O/+xnv1p7BPtrOr985w2RPIx9f6gDg3Q/eR6VY0P1Lm+eeeQaAZ555jmeeeQ5z8Tr0Si8l
      Zev5s299i7yqGr5YU7U0F1/BqNI/1IPSUMaRhx9k4qaBszO15ZGvfYuaqjzaW9px9N/gRv8E
      isuXsQ600jLopKK0mAvnz7Nr/4OYC8soryinpqZmLlel3sJ//2//lUuff8r3/vn/8N2/+0e2
      Vlei23knW0u0/OL10zz/3WfRKKC/900GO5vYfO9j3HvPNgCune3n92/8kL0HvsCfba+kVznO
      b947jdFcyN3G+bfauo07OXTwXh7cW8kbHzTy2KMHOfXHzyn2dXP/Fx+bO06hiHwCz1xojri+
      B6jadgeHH7qfiZ4uHvvG42gnbvL62X7Ig0OHj1BTlUf/zV6cBJl2TtF8s4fhvhaGbSDnFPL0
      t74OTHD89bNsffxRTr/6BvdWBMgp3rLgG7hYyqp38OLf7kh6jMfjZnJibJlKdHuIEUDV5m3U
      1IR+mIaGuohDx0d6sE976erqBnlrTGaaHDN33Hk333nqCAGfG29QyabHn0arU/PKsVd48J49
      +P3+iHM8TjtBtZ59Bx7EELTT0j2KXiHh84Z8gKIcFT0jNjYVGZmw28izFDFcfx3Yxmwvjq8+
      +Rz1H72N/cH95Fdu4x/+YS9jbZ/z/pnLfPPhfRHX625rJb+kBHPldiZPvYJbp+eBfN3cfm3A
      Re+onfICI4FAIOb6ab0xggGGbTa0zgH6p8288MLTvP/zH8Y/ViGz3ixz/O2zfOPos+nkvmxM
      Toxx2WPDHwziD4A/GCQQCOIPgj8QnN8+sy0wsy0wc6w/AIF4y4htwbll+LnzeQUjru8PBCOv
      HQxfDxKcyS8YCJ0bDAQJBsPSYfsJBCPvp9pgwuI3zK2XlJQCUFRcDEg8+c0n+NXx1yjN10Eh
      GEwWlNpQFsXFRahM5VSZPudHL72EpFTz9LPPUvub44w5vRRVbkMC7tpexb/+4Ecc/vLX2F5V
      SsDr4LXXXgdJiSGviKNPleGrOMjLP3mVnt37OfKVxzn+xnFOTfu468EvoTWvZ6vlCj966SXW
      b93DjnwLytw8vvvck7z7QS07KkycvtBIECVPPvPc3P+iCTo59vLLyDlFPHf0IQDu2lhAq78i
      4qZ/6+hfcPzN47h9Ciq27uHRqOtLc78HFBYXh2xIlZZiiwkCE7z32+Nc0ME9X/gKkr4Ew/S7
      vPLqqygDQe5QhX6nECqKii0APPzlR/lf//cXFOiVGXlwE9FyrZFxm5t9+/ejlmCot5OewXF2
      7tzClSs3UOtNbCozc7Wti9KKDWizIEaoWEhnuD9+eBKDuZCGTz/mC0+9yOaSnKUs25Iy3N/N
      b397gr944e8wqTNzp6+dfRdX2UFqqvLSPsftmKT25O/J236Ig7vWZ6QcCa/ldjPQUkegrIbq
      fA21H7xD6fpt7Ni6EYJ+PvrTafIMarbuuYuGunq2btmQXTVAKg7cex/XWzv42jN/Q3H+6n34
      ARTA148+l7GHH2D9rgME1MYFl2NTzUNsra7MWDkS0X69EZ+2mD35GgD8qCg3ealvHiaPYVBq
      0BsMXL/SiNqwuu9vuixIALqcPPbt25f6wFVAYVnmHzhDbv6Cz1EbctlanZvxssQSpKunh6Iy
      iZH+ToandVSUFHK9Y4R11WYG+92o1Wp0GjU2lxe1nB1h0QWZQIK1gcPhQG8wkCriOjLcT91I
      DyFrITjzx5y5M789bBmzPUF61hQJzppFhEyVqP3h5/hn9wfmz5kvV2h7MBgyeYIzx4Svz6dD
      S4JCAIIsJ8YEeuvjRvpHJzOSeVlBLuu2FqU8LketxhNI3vXBKMs4fd4k+9W4ovbrVZHnpFpf
      9DFy7Dm3WpZbXS/Q6inQzUf0BPGJEcDvTzdy8Xp3RjK/a3sld+fuTnlcmdGA3Ted9JhivYGx
      aWfS/ePuyP0FWj2jYecUaPUReUTvT3ROymN0ya+TTr6ZXt9mLhQCSIMsiPQKBIkRAhBkNQnD
      oEfu3UFbzwilBSam3V6aOga4c0s5Hq8ftazEqNNw6sKN5SyrQJBxEgpgdMJOodmIAmhs62f3
      xjIkhSLUl0dW4vGm118/U6gliUKdPuF+vSwznn3jOQS3SNKGsGs3Bzn6yD5ON7STl6Nj2GoD
      FPQNT7CuKP3m/nQo1id32NRKJYP2xANfJMUS9SMWrGkSCqC5awib0807Z64A0Njez9iEA61G
      hXPag93lRikp8Acy04ww7HQk3a9IIRBZKVEYFfWQpdC22bBk+LpzZn19Tl5E+DBXo4noEh29
      rlfJeAP+uWvpVTLeYNR62H5d1LWTrVfm5M2FTxe6blLHllOQmoQCsDlD9kTfSKhNYHg8NILL
      MTPSa3wqcUgynDJj6lBcvk6Hw5Y8DJoKXyCA1e2Ku0+h0zMWFiJVKPRzIdN8rT4ifKpQkGI9
      MsQZsx4VAs1fwPpCjo23Hl7OgiTmomCeBfUFWgxDztRCEeaL4HYhwqCCrGbJa4BMEbLxE1fr
      uWotSlGTCBbIihFAURpRoG5b8ihQIh9A2MOCRKwYAQy7UkSBFIvv15Kr1iRcT7Zvuddv9dzw
      ClBEgdJjxQhgKbF53VjDIiRWtzMU/Zl2zm2fjajEWw+PtqRalxREXCt8PV+rp9NmnduXr9XT
      aQ+t52vm09Hr+ZpQpGrC48SimY9ahdYNM/tcEfsKtKIjXDoIJ1iQ1Sx5DZBWO4BWh80W336f
      RS1JFCWx5fOEEyxYBEsugEFHctseQgPDi1L0XU/lBCuSOMGb8swx2/QqmfGUJROsdVaMD7CU
      TvCUxx07mEYrIkOCFSSA5UaWJPLDRCBLSvK1+rl+QypJSYUxNyYNYFJr5waU61Qy3kCAgpm8
      Eu2LTs/la8iNSQMx+8rjpEPX08xdLzwtokDpsWYEIEvS3EOYDt4EfYcUKBif2R6KqsSmCT8G
      RdRQzPj7YtOprpF4X2xZYvsD5YsaLi1WjQBSjQdQS0p6HVNx9yXyARL5DILsYdUIwBMIMJ5k
      UHz0rM7hxPMBZH0OFo14S2Y7Sy6AUkN6YVCtKnmThFGWGb+1HtMReAP+uDVAvhBFVrEM3aHT
      CIMqYNKT3BxJFQVaqA+QCFNY9wKdSsaCHlmSkCUlKPTIisRpbzCAXikjS8ZbTgOYZA2zXu1C
      0zrhBKfFqjGBUpHIqYWF+QBTHve8Uzkzxjhfq2fYGWqDsGgSp61uJ9YMpSH0LC82LZzg9IgR
      wO7dVWgzNPPz5rKCjOQDs8MbE99UQxKnVvgAgkTECGDIoKErNzMPhsmgIVND572BQMSwxmiS
      OcHx84vvA1TlxNYWgrXLijGBUnWFMMgyY8sw7UmECTSDMCfWLitGALfaFSKZE2yK6kcPoRFk
      ipQThIfICTtfJUmsm2mJldNIh197IWmdSsYX8GPR6OOm1xlycfm9yAopblo4wemRUABj1y9D
      ECRZRqlWoysowTU2zFRHC+sOPcpkezPqXDPOoX5kvZHc6vhfOCxJIwxq0epSRoFS4Q0EmEjg
      A0gScSfWTdcEskXVCuGOaqr0Yh1ZBfN9+yPSMzNapLquCOemR0IB+BwOlFotQb+Ec2gAe38P
      pQceYnp0iIm2G3gdNjy2SXI3bsNtTfwpzXR6g6aDLClj5v0JxyDLCQWwEIQJlF0kFIDKYMS8
      ZQcjDReQjSb8Hjd+9zRKrZ6Ax03QH4pVq3NymexoxrR+45IW1BvwR/STiUZiYQ+pLCnTjgLl
      RJlQOpWMVUzDuCZIKABZb8DafAVDaTmSrEaXX4S9vxtdYTGaXDOTHS2Y1m9k7Eo9alNmp0lc
      DLO9OeMRzweQJYlhV+z4gnimQ7QJVCwZ58SjU8kUSUZ8gcBcw5lqpuHMgn5OPLPbwo+dTYcL
      bDYdfV54vkU6I7IitPQFAuiU8lw6R573IQSpSSiAeG/0nPINc2nLttCHLwp218QctxhSR4HU
      SWuARGFNSOADLEAssdcKYPXM5OeZsbs9TqyhSfMwa/SMzDSQoQCrx4VZo2PE6cCs0WH1uOa2
      WT2uuWPCj48+L5TvfB4j7pm83C6suObSEPJtRBtHeqyaKJBaqUwxO7R6Qb07E5lAwgfILpZc
      AJmKAqXyAZIFNBdiAqXTECZLUoR4Zs2OuevJmoiZIQQrlyUXwKgr9YOQicHssqQkP0ENsZAh
      kVNeN+OeqBogqqaIMIFmiH7gzbM+glJG1ilRKaS5pUITGvEVvk3WKfEF/GjjHD+7L0cOjTab
      XWpVMrIUf5/wAdJjxZhAt4o34J+3o6OIZzrdShTIFDUJVbwaoMs+AYAVFxaNjhG3fcZ2D9U6
      5qht8za8K8m++bYLq8cF8fyImaVFmG1pEdsZrjiPXG1mdFGZayRAenb5rTrBCyXheIA4D050
      FAhIowbQzaW1ShnS/B0Ey0tsZziHi66pxNOPLASNSklhbnrHpnKCNUpl0nmBDLI6YQ0QzwdI
      1B06nShQOoTnrchMloIlYNWYQMlMHAhFiRJFaxbSHTpeFGhDlGOcjgkULgCVpMSsDdUIlTlm
      bN7piHT0MkfWgoK5ZdxjjWHHQswyVOsIUrHkAkj17S8Ai1Yb89AtlGRRong+wHKaQCpJmm8X
      ILJ2iLHtEywXcqxoB0ifhAIIBPzUv/kT9v3Fd5js7WbwWhOFm7cx0dOFrNeTu66SvHUVKS+Q
      yrQBWEkzGi7WBDKHPXDhTjCEHO5ZQeTIWjEbxQoioQDGOzvY8sUjjHe0Y6nayGR/L1pTLpYN
      1Vg2bKT780/TEkC6pHKC8zRalFJipehViZ3khfgAizWBusNmdobkNUC4GNJZ6pShSbXK9CZk
      SRkR7ky01AkTKC0SCsAxOoxHp8djt+OcGKP8zv2gkBhtb0WtN6LJMWW0ICNJpjwBkCRF0sal
      TPkA8UjHBIomXFzRNUC4WNIyazSzZo2Oab83rXPMwgRKi4QCKN6+G22OiempSWzDgwy3XCev
      vJKiLdtxTVop3rZzOcuZkkz5AFWmxQ2JjDaBwvP2pXDgBbePhALQzrzhtaZctKbIWKbekr+0
      pbqNLIUJpFXJECaAhZpA0ct0jhEmUHqsiCiQWaPNaCNXNLc6JDIdE2ghTnDPjFgUwITbNTeQ
      RzHz12O3YtboYpbdM0tgLh29tHmnhQm0AGIEsDnfhFGjzEjmpUYDQ87483UulFQTX+WqtQln
      hojbF4gEQyLTMIHidYa7FSdYcPuIEcCA3UHHhC1jF9DrUh8DJG3lhZCT22tP9oEMFuQDJCId
      E0glKecmxJplMTUARIqw0jh/nVsxg0CYQOmyYlqCh1P0Gl3ovD/hZNoEssQZfrmQhrBENcC8
      +RJr2sSaOLHbQuUI7XP5vWn9b9nOihHAUnKrJlA6vUGjBZAsDJqqBhCNZcvHqhHArfgACyGe
      CaSABTvBycKgqWqA2WO0SplCrRJZklBplXNzAs2mZ/OIty3aBPrNG8cYcQR44qm/xDXcQf66
      jXidk4yNjJFrNqJQm1AG3IyNjLFp+3b6O1tR6MwYVTDpmMRkKcFtd5BnlPGojOTq1Wn/piuZ
      ZRgRZkx5TDpRoNDkt8mmRlyYD7CQ8QCx5y7MCQ7v1JZuDRDKL2TOjDpDYwLs3pCQzOpQesLj
      Cs0jFGebLIVPN+/BGcjhb188SltdLZ/1BJn803lylNOYDWr6g8UEXOMYcFG1oZSrvXaU1quc
      vTbAkT2VuAsrGDxdhzI4TUmungNf+daifreVyIqYHh1SO8EGefFTkSxoSGQaJtBCneDZhzQe
      4UKJrgEg5MxO3PJYAjWOiV4+/ewcCpcbUBMEDOZi9m8voZ2NdFz6A5JPhd/nQw5YaRn0YM7R
      AVruO3SId4+/zraSPD7p9vAl9QrqvHWLrBgTaCSFEyzdgnmzoCGRcUwgiUgnV7FAJzi6BlCE
      bQ+vOWJrAFBpQ/6DUdZi905TYQgdE54GMIaZU0ZZG9Md+vkX/parzTfZcdcBCtuvk3/4Abwu
      G7l6NTp0bMw/zOmPPqSgYjeHdmyho/o6co6FHFnCCBw+/AhDzefZuWtv3N9ttRIjgA15RrRy
      ZtoBSgw6Rjy3vx0gfn6LN4FUcUygZE5wdA0QPoNduFDCmasBVDJ2rz+UZ1geqdKRJhDIWiN7
      7whNZbNx60w3FmNINGog11DMFw4fobCwcOaY7RHnFxeX4HLuYXdVVdzyrlZiBDDocNE1mbl2
      gEyFo72BQNIxAwv1AZL1BYqWUbQJJEvKiLAmxJpA4STrChHtO0SXKdyBNqt1aFUyKoUSlaRE
      q5TxBf0UzqRniVcDpMPsw5+IDWvs4YeV1BUiRW/QW2Eh3aHjdXuIjgKl0w6Qbhg0xlSKOkbW
      KjGrQyZQj8MaGgivDp1jD4Q5xYHIWiK6BvC5Jjh38SpFZeVs27g+pvxdTdfI372D8JCF1WrF
      bI7fMt7W1oYCBfbhHiyba7ANdyIrFFRu20Vv81UkJPodDpTIrMuR6J7wsG9/Dbrkn4JbdlaM
      E5yqtVYvy4wv0gnO9BdiVJKU9I2/kDBoohpg9hhtmAk0++Abo8Kn8daja4D6hqvce/9BZAV8
      duZPBAN+1pWVcK5lnAKdhDw5SGcgyO5SM20328gt3IrLOkDjVB0GvQpDfjUdV66wfd9eqivL
      Qj6ZQkFQk8dg5w38Pg/7dq6n6UYP3ikbxbKWnTU1NH1yFk3lFrZYFCvu4YdV5ARrlMqkPkCy
      ATHx8CUwgTakEQWKZwJF1wCWNMOgqWoAiI0g2b3Tc2/+2fUJj4u8sPXoGkAvS9imfVh0KhRq
      A/t3l1N/oZXN2/egHO9Eo1lH6Z6ddNafR6lUYR0bQyuB0VxAzd4NNFy0snFTKUPDI1RXllG9
      MTR1ZkNdA1WlZj68cJ0D9x7EP3UaSWUGpvnTeycoqdhJUVFRzG+6UlgxAkhFKh8g2YCYeCaQ
      7hZMoCLJmLIG6A4LgwIJa4DZAfIQPww6+3afM4FgLvoT/uZXScqIxq/oGmBXzX7qL9YzZC5i
      XVEeF5sGqLl7N8PTWiRNCZZcNfX1TVQWFDBonWRdYSGywk9AAtBSUqKnf3CMwoJIP6GktISC
      shI29YemyC8w5ZC3YQeKiRGO1Oynv6UZtz+IRrkyQ6eKYDAYDN/wQUc3g47MNMOnGwUq1htS
      +gDFekNSARTq9Emd4GgTqESfgz8QiDk25EzHzgwX84GMsJZgc9gHKmbXw293jqzF5pueS8++
      3cMnvAIiZnqwzwhDq5QZcE3Nve2BuZBoMswaPdWmzH2kcK0SUwMMO1302jIzL5CkgBLT7XeC
      43ErJpBOJc/NBJ2I6LzT6QoR7/zCMCc4+qGfPd8X9KNShELXKknCFwiIaVHSZMlNoOEMOcF5
      Gi1JxsQv2AdIRKZMoOgaIJ2uEOHr8ZzgWWZ9gFkBuHxeVFIAX8CPWaPH5p1GJa1Aj3MFsmJ8
      gHRagpfDB0gHXxqT40Z/rimdGiDcCZ5924dHkGaX4S3A4XmqFErsXjel+jSn4xOsHAHcKskG
      xUuK2A9kJAqDRps78bblqDUR87EvRQ0wEccEiibcgZ72+QAfRlkzI4LMztqxVlkzAlgoiXyA
      eE5wOt2hM10DzAoongkUfXy4EGRJwiiLyUjTJWsFcDuJN91h9Hq4gKJNoNl0PCfa6nahValQ
      SZnpz7XWiQmDCgTZhAgVCLIaIQBBViMEIMhqhAAEWY0QgCCrEQIQZDVCAIKsRghAkNUIAQiy
      GiEAQVYjBCDIaoQABFmNEIAgqxECEGQ1QgCCrEYIQJDVRAlgmsbLLSlP+rD2FABnz52Lu//8
      uXP4orbVnvowrQLZB5r5tKlrvkR2K7/+2eu89sbP6B4YBaCx8XJaeYWXVSCIR4wAmhpbARgc
      GmKwt5Pm9vmHcWywl8tN1+gbGAJg48aN+KZtjFhDs0l7nFOMTTpZv3Hj3FjLwd5Omq41MzA0
      BD4Xg2OTAIwMDhEA/N5pmi5f4mbvIAC+aTvjU/NTqfzy57/goa/8GU997QhOh53ezjZOvneS
      uro6HJ4AAb+HK5cb5soA0NfVzo3WToLA0NAwANaRfmwuH/aJUerrLzHlSD6xlCA7SGgC/fiH
      3+PilTbqat/iSu8UrfWf8JsPz+F2TjLlCM1Se6q2FqVK4sSJdwE4U/s+0woVp2prAaj/5D0+
      PNeIc3IEhxuwD3LqsysAfHyqFg9w7fIlplwe6j86QX3bcEw5SvKNvP3Oe4w5A2zbtCFqb5Af
      //D7WJ1u3jr+Cm0Dk3xa+3s+qW9msOs6EzNDaF2TQ/z63dPotX5ePfYafr+XukuNt/TDCdYG
      CQfFV2zezWNHDnOzTkH/lJOe1j7+5i+PogCa2zrmjlOoDBgU00wHggzYvDxsmv94WmvfJH95
      9CgAbR03415HEfRy5fIN/I4Rgl09VFdH7n/0G88yOtBD7Qe/Qy7azDePHKKivJyamhpw9KEu
      28sD997Dwb0V/Py9egIOG88+9+zc+d3NDXyvb5j//I//CaUCSotzOH/+AvsffHQxv5dgjZG2
      E6zwuLC5/RAM4PdHTtNxaP8W3n37BHnluyO2e1wO3P4gwYAPvx9QKAjMnOuaDr2eP7/awYsv
      vsCTjz8S97q2KRsFpRUcfe67TPSFROTzz8zpqc3DbQ2ZTkNdXRjy81H4p7F7/ECQYBAqt+7l
      4bs2cb7+GgR8PP70X/Ef/v7vaTz/cbr/umANo4peLSq2AFBcHJrSWms0Y9Kq+epXHuUnL/8A
      fU4u+rzQpKvFRcUAlG6/h+63/jd//V+eiNj+lUcP8fIPvk9Obj55BcVgWgcD7/DjH7dhmw6p
      b0t5Pi+9/AqFuVoKN+9HpQWLaX66j0uf/oGrN4dQSgoeeCSUf1melpeOHeObf/5d7t5Zwg9/
      9BJqg4VvP/sk07sLOP7qSyApeerbL1JcXMSBhx/hjyffYmC8hD+c+C1Ob4DKbXcu2Y8qWD2I
      aVEEWY1oBxBkNUIAgqxGCECQ1SyJAJzO5f3YhSA+4j6kZkkEEB0mXWmc+fAEL730EsM27+0u
      ypKy0u/DSiALZ4d20trr4sUXX6Sv+SL/fPIchWUbkGzdWEfHCJrK0Ohz2Fbk5szFbr7z/Hd4
      /913MRZVY+9twmGzU3PoMIMTCvxT3Tx99GjMh7UFq4cs9AFUOB0TeD3TtN5o5bGj3ybgGMNg
      LuXpJw6z/6HHMcp+NmzbyaE7qrhy9QYlG7ZiHRvCUrqBo187jEdThnvwEtqcYvHwr3KysAZQ
      8/iX7uWnb/yCb3zrG3x44nfcc+hRFO5JjIVGKjBi3L2b1qYLODSbOLxvM299eJa79t2BUaPC
      WGikypuDu1XPzvvuu93/jOAWWZKGMJvNRk5OTqazXVYmrP3kmcvi75y2cuJ0E088+uDyFmqB
      rIX7sNQIAcxw4dw57jxwH71dHQSDUF1dxc2bnTgmx5FUKooqtlCQq0ud0QpiNd6H5SYLfYD4
      5OUaaG/vwulwIHmnGRvpI6Axo9GZ2FBRhHU89Qe/BasPIYAZFCo96qATtx/WV6/nk/NtVJXl
      MTE2xJkLV6laX3S7iyhYArLQCY6PJd+CxWzkRlsvCtnAPTXbkYDqLdsx5xnoGxymoqz4dhdT
      kGEifACbzZbs2LRxOp3o9cm//C5Yenw+H2Zz7Ee1BfNE1ACZdJiE83X7ydQLbS2zKBPoauMl
      lFoTG/KVfHRtgq88sJeTv/wVDz71JDq/H7/fj88XPS+EYLkRQz1SswgBOBkesmEpCOIymTFq
      VNgnh9HllgKgVCpRKpWoVJl3L/pHbZxt6sbnDxAE1hWYuH93BUql8OXjoVCIdpAmuGYAAAi1
      SURBVOpULOIp1ZJXYKLMosHq8FBRWcrZz6+xucyS+dKFcXPASkPrEE8c3IpGrSIYDNLRb+Wt
      Mzf4xgPbkaRVcrODQQJTfQRGWkBrQlm8C0WcL74LlodFNYS5bBOM2j2sKzDhQY3baUOjVCEb
      DSjJfANMMBjkzdorHH14Z8zb/lLLACqVxO7qlR+hCfq9eC+9gUJrQiraQXB6En9fHarqh1AW
      78z49URDWGoWZafocvKomPldtYA2NzeDRYplyukmz6iJa+psW1/A++fbVoUAvFd+jbL6EErL
      /NwvyvK78Xz+CoqcEiR9/m0sXXYijOdlIuidJui2Rzz8AApJQt7xOL72j25TybKbVSEAk17D
      hN2Nf3Y+oDBudI2yqXxp/Y9MEPTYUGjj15QKnYWga3KZSySAVSIAhULBfbvKOXG2BbcnFF4N
      BoO0943TMWBl54aV301Boc4hOB3/IQ+6xlHoltaMFMRnVQgAoKrUzD0713HibDM/q23iZ3+4
      Qu+Ija/fv21VRIAUshaFxoh/vCNiezAQwHvtbVQbH17S67/7m9c4d6mV0ZtN/Nvrb91aZvYB
      /ul7r4BnnNOfNmWmgLeJRUWBrjZeQqUxsb7UQEOnjQN7NvPZR3/kjoe/gA4RfUjEXBRIY0Iq
      Xt4o0OvH3yDHkINBVjHiclOo9nK1pZOHv/kMVz56n1G/hg25fvonPBy6eyfjmo101v0BtcKF
      NWCiROOipXOAbz7/H6lSDfFP//YLjjz2JXp6nZgCfXzW2MNTR/byuzNtuKyD+DwKnjl6mPf/
      eJGNO+6i69Ipirbcw9GvH8n4/3krLCoKND09jV5rQuGdxu5w4/famLJ78RMaiC1aghOhQNr7
      HMGpPrwjLSi0JpR3foegSrMkv1fku02BRinhVipRA129gxy47wBTPS34DAW4+nrYes/d3Pzg
      I6w2F17FNC63B3VuLn/z5JP88P/+C/cdqMExaYN8qNp7P12NZ5EsexixOjH43LiAR554mpuX
      atE53Fxv7WDrHTXoJNi1cycXO3oy/j/eKosQQIC9NQewdl9lwK5nfVke5y40s379OmBpW4LX
      DJb1yJb1S36Z8JbgPbt3U5FvoH9ai+SeIn//Tt6pPcsjR75MT3ct+/bvx+/3k1u2kd179/HW
      Wyep3raTEosRBfDVI49Qe/YSj99xELRq9mxWkhc0MqGwMOQfRLfnTkpKqwjotOi270Dl8VGy
      qYITv/odhTX3Y7V2s2vnriX/nxfKIkwgP23NrfgUajaVW7CTg3WoG7PegL64CDXCBFopiPuQ
      GjEkcg0TfR+aOuY/QFJkNlBsNtyOYq0ohJ2SRfyPV+Yb245+cRd//sVd3LhaT+nWPXQ1nKd8
      5x0EXD4KLHkAdLc0MkEee7ZU3q4iLzlCAFmObWqc/ro6uhrqKdxezbXmXsZ6mgl4vFRs3kpr
      Rys3ms7z1DefvN1FXRKEALIeBXvuvBN5amhui9aQx/pqM3Y/7KvZz2DX2v2emhBAFvE//3q+
      sa1oxv4vK69Cr1RSWb0Vo2ykqryMCQ1cqv+cu7/4ZfJNuRiUW25XkZcc4QSvYRZ7Hz4/fw6n
      J8iD99+35gfVLFoAIyMj5OflMGZzU2jJZWRwCEtJ8ZKMBxAsDnEfUrOovkDjg91cvtaOb2qQ
      S83dQJD6M2dxZbhwgsxi+96uuT/3pz8AoK+nA2cWT6O+cB8g6GNgzEWJJfRmydMq6e3pwlQc
      atkUXSFWDulU7v29N9EUl4Nrio9Of4pWr0erVmHUyQRkE077OPcfOLgMpb09LFgAAZ8PlQo6
      b/ZSnLueoopKrl36nC0loS7JoivEymEh9vuNa5e5475DXPjkj3hV4PDo8Lv6UKpX/liLW0E4
      wWuY6Pswa/YAKMv3o6rYz42rdYw4/FQUFdB09QY6g55dG8upax1A6Rhgz8EjlFlMt6P4y0JS
      AbRduUj7mIfi3Bz27t2d6LAYhABWBuI+pCapE/zenz4jP1fLZxc+W67yCATLSlIBPHKwhoa6
      Bh48/NXlKo9AsKwkFcDw2DiWPCPvv//hcpVHIFhWkgrA5/Ph9QUw5Qo7UrA2SRirPF37LhNO
      P7KsZktVdaLDBIJVTcIa4L5Dj3Lo4AE2bNhASWHkjGUdrTf47MwZrMOdvHemAQhy8pe/wr7U
      pRUIMkzCGkAlyxx/801KKsoZn7rOlqpn5vbl5eXSPziKEsg3qOnt6cJcGqolREvwykFMj56a
      hAIIBoPsv+cgftc4Kn3Y7MUBDyOjE+Qa1NhcXtESvIJZ6z05M0HChrCG86e52t6DIcfMvffd
      T3F++q2BogFmZSDuQ2oS+gB7736A++7ai2OsjxMf/HE5yyQQLBsJ7ZRLn53GLuXw1HPPI4sv
      sAjWKKIz3BpG3IfUiFe7IKsRAhBkNUIAgqxmEQII0tZ8jUvnzzLY18HJTxoAREuwYFWyiNYq
      BZWVFVyedGFUSzHfCRYtwSsH0RKcmkVNj954pZm79t+Fd7wz5jvBoiV45SBaglOzqKfUkpdD
      S0szFRUVlJq0WPbvCX0nONOlEwiWmEUIQKJ689aILUv9nWCBYKkQUSBBViMEIMhqhAAEWY0Q
      gCCrEQIQZDWLEsDYUD/9w2P4nRO0dPYD0NJ0BU9GiyYQLD2LEoDWmItjchS/a4LOgTEIernZ
      0iEEIFh1LKohzGCY/7xmaZ6WxiutlKzfAIiuECsJ0RUiNYsSQGd7M6OjYxTmVlC4roy+libW
      WSwoEV0hVhKiK0RqxIiwNYy4D6kRUSBBViMEIMhqFiWAvu4OWto7RRhUsOpZhAA8WCe9mHAw
      OD4uwqCCVc0iBOBHIanQyBIebzAmDCoQrCYWIQAdKoWTrokg6/INFK5bj9ftotiSgzLz5RMI
      lhQRBl3DiPuQmojWKpvNlpFMnU5nRvK5nQQCASRpdQfJRGt8aiIEkMm3xWp/86wFAWTqhbaW
      Wd13mKWrbVb7wy9Ij/8PnafxSIE9wlAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      MY1wNCmAcDQpgHA0KYBwNCmAcDQpgHA0KYBwNCmAcDQpgHA0KYBwNCmAcDQpgHA0KYBwNCmA
      cLS8FsC2LSZGo5w9f5FUxiA23M/sYhqA+LUxhmOz+Vy9EBvKawFMPYXlDtHSVMPpMxeITU0y
      Eo0CNtGBHoZHp/K5eiE2lNdpHly+IOWqytnT3dQ1dDA9PoBmpdFTCyi+QlxZlqdENE2TbHZ3
      JsuVLMnabFZeC2CbaT7+uJuWI0cpCvmZHofqsjDnLvZRW19NdCiOoii4XC40TcPtdu/KeiVL
      sjablddDoFR8Bt2EaO8VhmPThEIhCsuq0XWDssIwBeFAPlcvxIbyugcIFO/hS7+y55aRUgAe
      f+whAFqaZWpEcWfJZVDhaFIA4WhSAOFoUgDhaFIA4WhSAOFoUgDhaFIA4WhSAOFoUgDhaFIA
      4WhSAOFoUgDhaFIA4WhSAOFoUgDhaFIA4WhSAOFoUgDhaFIA4WhSAOFoeS+AbVsYpgmAYWQx
      LRsAyzSWx4W4U/JbAEPn4vlzfPjpaQBOfvguF68OAXC5+zjHP+nJ6+qF2Ehe5wXC5aWt4zBn
      z14vgK+gFCsdxzJ1MoqPoFvFtu3lL8uydmW1kiVZm83KbwFWUCkLuRiIjlBUsYeJqXTOrbZt
      78pabhRKsiRro6y8FsDM6gyPjBCLTVBWdX0q9PLqan768495+qmHmJhKoyjK8pemabuyXlVV
      JUuyNpWV1wKomovSsnJKSstxebyUFbfi1lw888yX8HpcHO0M53P1QmworwVQVI1wuGDFuNfr
      AcDtlquw4s6SV6BwNCmAcDQpgHA0KYBwNCmAcDQpgHA0KYBwNCmAcLTb/FkgIe6caGyei9Hc
      P84uBRCOcTE6xQ9fP5UzJodAwtGkAMLRpADC0aQAwtHkJFjc1X55YYSfdQ/mjH39qVb2Fyuk
      3/r9nHFX7TE8R3+Dub/8X2THxpbHFUXB9Z3fXDVfCiDuarGZRU72jOeMPfdQIxSAOXg8Z1zx
      hgDQe66SuXr1lhsU1vrVq7wfAqWXFpience2bZYW46Sz16dCyaQSLC6lN1haiPzKawHMdJyT
      53qYj/XTMzLLxQun6OmNAnD1/Md0XxhcP0CIPMvrIVB8eoKK2kYa9xTw8Sen8AYKIZPANFJk
      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
      im1dz7p8tpvphZ28L6JiWwaGaXD1QjdT81s//7pnCqAn5gmU1tLe1s6ekIv5HZwEZ1OLeCIV
      tLe3U1/kZy61/ReHmU2h+IvoaG+noSLCTCK18UJrsK0spitER3sbTbWlTM8ntp0FBhnbR0d7
      Gy0N1Vybnt94kXWy0qab9vY22g/VMzk5s/EiazJZymh0tLdzuKOJ2NjWT1xvzVpM23R2tHO0
      q4Xx4fGNF/mce+YQyFdQCsPn6O6OoXiCHPZsv7vuYCGuzAjd3d3g8nM4uP3dsOYJElBSnOzu
      RtG8dNSuvNa8WYrqocBrcbK7GxQ37R17t50FLopC6vUsNNo6O3aUVVrgobu7G9tWaO08vIMs
      jfIiH90nT2JZCq2Hd5ZVWRLk5MmT2KbNocNdW4+w7xKzs7Obv+9Ivz2dMnclKx4bsqcW07uS
      tXhtzI7NJXYlKzk3aY9dm9+VrPTijD0Sm96VrExqwY6OTOxKlplN2gODo7uSZdu63dc7tOWs
      e2IPYNs22WyGG4f9yYU4atH2zgFWZC0ukPWV7UpWKrFIOrD6VYhNpJHNZLE+C0stJUht+wg1
      NyudWiKZ2u63Ojcrm06ylNzucbtNNpvFuvHH0o0UiW0fMtoY2ewtHwbUWUxs/X2Te6IAlpkh
      2tdHdvk172O/d3svDtsyGOrv4+YphMa+bR8CWQz396EvZynUV61+SW8TW8bwQB9p88aDVKhr
      qNl21mi0n2T2xoZdv1y43azx4UES+s0T8uq6hm1nTYxEWbjlnKu6dt82s2BibJj40s0y7tlb
      v+WM5Q/D3Wlzc3MUFRVJlmTd1qx75iqQEPkgBRCOJgUQjiYFEI72/wFzcbm0T/YB8gAAAABJ
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
      +e2Ca2LYpwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
